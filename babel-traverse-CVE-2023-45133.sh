#!/bin/bash

# This script is used to apply a fix for CVE-2023-45133 on a NS8 module.
# See: https://github.com/advisories/GHSA-67hx-6x53-jw92

source ./ns8-helpers.sh

set -e

PACKAGE="@babel/traverse"
REQUIRED_VERSION="7.23.2"
CVE="CVE-2023-45133"
# Branch name for the fix or "main" if you are reckless
BRANCH="babel-traverse-$CVE"
REVIEWER="Tbaile"
GIT_WORKSPACE="~/git"

if [ "$BRANCH" == "main" ]; then
  USE_BRANCH=false
else
  USE_BRANCH=true
fi

# Expand tilde manually (needed if GIT_WORKSPACE contains "~")
GIT_WORKSPACE="${GIT_WORKSPACE/#\~/$HOME}"

# Check first argument is provided
validate_repo_argument "$1" || exit 1

# if [ -z "$1" ]; then //// 
#   echo "Usage: $0 <owner/repo>"
#   echo "Example: $0 NethServer/ns8-kickstart"
#   exit 1
# fi

OWNER_AND_REPO="$1"

# Check if gh is installed
check_gh_installed || exit 1

# if ! command -v gh &> /dev/null; then //// 
#   echo "gh (GitHub CLI) is not installed. Please install it first."
#   exit 1
# fi

# Check if logged in to GitHub
check_gh_logged_in || exit 1

# if ! gh auth status &> /dev/null; then //// 
#   echo "You are not logged in to GitHub. Please log in using 'gh auth login'."
#   exit 1
# fi

# Check yarn version is 1.22.x
check_yarn_version || exit 1

# if ! yarn --version | grep -qE '^1\.22\..+$'; then //// 
#   echo "Yarn version not installed or not compatible, 1.22.x is required"
#   exit 1
# fi

# Extract repository name from owner/repo
# REPO="${OWNER_AND_REPO##*/}" //// 

# Clone the repository if it doesn't exist
clone_or_update_repo $OWNER_AND_REPO "$GIT_WORKSPACE" || exit 1

# if [ ! -d "$REPO" ]; then //// 
#   git clone git@github.com:"$OWNER_AND_REPO"
# else
#   echo "Repository $REPO already exists, skipping clone."
# fi

# git checkout main //// 
# git pull origin main

# Create or switch to the branch, if needed
if $USE_BRANCH; then
  echo "Using branch: $BRANCH"
  create_or_switch_branch "$BRANCH"
else
  echo "Using main branch, you reckless person"
fi

# Check if branch already exists //// 
# if git show-ref --verify --quiet refs/heads/"$BRANCH"; then
#   echo "Branch $BRANCH already exists, checking out."
#   git checkout "$BRANCH"
# else
#   echo "Creating new branch $BRANCH."
#   git checkout -b "$BRANCH"
# fi

cd ui

# Ensure the package is installed
if ! yarn list --pattern $PACKAGE | grep -q " $PACKAGE@"; then
  echo "$PACKAGE is not installed, quitting."
  exit 1
fi

# Find package version
CURRENT_VERSION=$(yarn list --pattern $PACKAGE | grep " $PACKAGE@" | awk -F '@' '{print $3}')

echo "Current $PACKAGE version: $CURRENT_VERSION"

# Check if the package needs to be updated
if [[ "$(printf '%s\n' "$CURRENT_VERSION" "$REQUIRED_VERSION" | sort -V | head -n1)" == "$REQUIRED_VERSION" ]]; then
  echo "$PACKAGE version is >= $REQUIRED_VERSION, quitting."
  exit 1
fi

# Add resolution
npm pkg set resolutions.$PACKAGE=$REQUIRED_VERSION

yarn install

# Check again the version
NEW_VERSION=$(yarn list --pattern $PACKAGE | grep " $PACKAGE@" | awk -F '@' '{print $3}')

echo "$PACKAGE updated to version $NEW_VERSION"

# Ensure the build works with the new version
NODE_OPTIONS=--openssl-legacy-provider yarn build

confirm_and_commit "$OWNER_AND_REPO" "$PACKAGE" "$CVE" "$USE_BRANCH" "$BRANCH" "$REVIEWER"

# if $USE_BRANCH; then //// 
#   CONFIRM_MESSAGE="Do you want to commit and create a pull request on repo $OWNER_AND_REPO for $PACKAGE $CVE?"
# else
#   CONFIRM_MESSAGE="Do you want to commit changes ON THE MAIN BRANCH of $OWNER_AND_REPO for $PACKAGE $CVE?"
# fi

# # ask for confirmation before making changes
# read -p "Do you want to commit and create a pull request on repo $OWNER_AND_REPO for $PACKAGE? (y/N): " confirm
# if [[ "$confirm" != "y" ]]; then
#   echo "No changes were made. Exiting now"
#   exit 0
# fi

# git add -A
# git commit -m "fix: $PACKAGE $CVE"
# git push --set-upstream origin "$BRANCH"

# # create a pull request
# gh pr create --title "fix: $PACKAGE $CVE" --body "Fix $CVE" --reviewer $REVIEWER
