commit b18fcde0e2557239cc6d563590b1f1c43257a2a5
Author: Andrea Leardini <andre8244@gmail.com>
Date:   Thu Aug 7 16:59:31 2025 +0200

    refactoring

diff --git a/axios-CVE-2025-27152.sh b/axios-CVE-2025-27152.sh
old mode 100644
new mode 100755
diff --git a/babel-traverse-CVE-2023-45133.sh b/babel-traverse-CVE-2023-45133.sh
old mode 100644
new mode 100755
index 13c3625..57330bf
--- a/babel-traverse-CVE-2023-45133.sh
+++ b/babel-traverse-CVE-2023-45133.sh
@@ -3,109 +3,144 @@
 # This script is used to apply a fix for CVE-2023-45133 on a NS8 module.
 # See: https://github.com/advisories/GHSA-67hx-6x53-jw92
 
+source ./ns8-helpers.sh
+
 set -e
 
-# remember to update the CVE and branch name as needed
+PACKAGE="@babel/traverse"
+REQUIRED_VERSION="7.23.2"
 CVE="CVE-2023-45133"
+# Branch name for the fix or "main" if you are reckless
 BRANCH="babel-traverse-$CVE"
+REVIEWER="Tbaile"
+GIT_WORKSPACE="~/git"
 
-# check first argument is provided
-if [ -z "$1" ]; then
-  echo "Usage: $0 <owner/repo>"
-  echo "Example: $0 NethServer/ns8-kickstart"
-  exit 1
+if [ "$BRANCH" == "main" ]; then
+  USE_BRANCH=false
+else
+  USE_BRANCH=true
 fi
 
-# assign the first argument to OWNER_AND_REPO
+# Expand tilde manually (needed if GIT_WORKSPACE contains "~")
+GIT_WORKSPACE="${GIT_WORKSPACE/#\~/$HOME}"
+
+# Check first argument is provided
+validate_repo_argument "$1" || exit 1
+
+# if [ -z "$1" ]; then //// 
+#   echo "Usage: $0 <owner/repo>"
+#   echo "Example: $0 NethServer/ns8-kickstart"
+#   exit 1
+# fi
+
 OWNER_AND_REPO="$1"
 
-# check if gh is installed
-if ! command -v gh &> /dev/null; then
-  echo "gh (GitHub CLI) is not installed. Please install it first."
-  exit 1
-fi
+# Check if gh is installed
+check_gh_installed || exit 1
 
-# check if logged in to GitHub
-if ! gh auth status &> /dev/null; then
-  echo "You are not logged in to GitHub. Please log in using 'gh auth login'."
-  exit 1
-fi
+# if ! command -v gh &> /dev/null; then //// 
+#   echo "gh (GitHub CLI) is not installed. Please install it first."
+#   exit 1
+# fi
 
-# ensure yarn version is 1.22.x
-if ! yarn --version | grep -qE '^1\.22\..+$'; then
-  echo "Yarn version is not compatible, 1.22.x is required"
-  exit 1
-fi
+# Check if logged in to GitHub
+check_gh_logged_in || exit 1
 
-# split REPO variable into owner and repo name
-IFS='/' read -r OWNER REPO <<< "$OWNER_AND_REPO"
+# if ! gh auth status &> /dev/null; then //// 
+#   echo "You are not logged in to GitHub. Please log in using 'gh auth login'."
+#   exit 1
+# fi
 
-cd ~/git
+# Check yarn version is 1.22.x
+check_yarn_version || exit 1
 
-echo git@github.com:"$OWNER_AND_REPO"
+# if ! yarn --version | grep -qE '^1\.22\..+$'; then //// 
+#   echo "Yarn version not installed or not compatible, 1.22.x is required"
+#   exit 1
+# fi
 
-# clone the repository if it doesn't exist
-if [ ! -d "$REPO" ]; then
-  git clone git@github.com:"$OWNER_AND_REPO"
-else
-  echo "Repository $REPO already exists, skipping clone."
-fi
+# Extract repository name from owner/repo
+# REPO="${OWNER_AND_REPO##*/}" //// 
+
+# Clone the repository if it doesn't exist
+clone_or_update_repo $OWNER_AND_REPO "$GIT_WORKSPACE" || exit 1
 
-cd "$REPO"
-git checkout main
-git pull origin main
+# if [ ! -d "$REPO" ]; then //// 
+#   git clone git@github.com:"$OWNER_AND_REPO"
+# else
+#   echo "Repository $REPO already exists, skipping clone."
+# fi
 
-# check if branch already exists
-if git show-ref --verify --quiet refs/heads/"$BRANCH"; then
-  echo "Branch $BRANCH already exists, checking out."
-  git checkout "$BRANCH"
+# git checkout main //// 
+# git pull origin main
+
+# Create or switch to the branch, if needed
+if $USE_BRANCH; then
+  echo "Using branch: $BRANCH"
+  create_or_switch_branch "$BRANCH"
 else
-  echo "Creating new branch $BRANCH."
-  git checkout -b "$BRANCH"
+  echo "Using main branch, you reckless person"
 fi
 
+# Check if branch already exists //// 
+# if git show-ref --verify --quiet refs/heads/"$BRANCH"; then
+#   echo "Branch $BRANCH already exists, checking out."
+#   git checkout "$BRANCH"
+# else
+#   echo "Creating new branch $BRANCH."
+#   git checkout -b "$BRANCH"
+# fi
+
 cd ui
 
-# ensure @babel/traverse is installed
-if ! yarn list --pattern @babel/traverse | grep -q ' @babel/traverse@'; then
-  echo "@babel/traverse is not installed, quitting."
+# Ensure the package is installed
+if ! yarn list --pattern $PACKAGE | grep -q " $PACKAGE@"; then
+  echo "$PACKAGE is not installed, quitting."
   exit 1
 fi
 
-# find @babel/traverse version
-CURRENT_VERSION=$(yarn list --pattern @babel/traverse | grep ' @babel/traverse@' | awk -F '@' '{print $3}')
+# Find package version
+CURRENT_VERSION=$(yarn list --pattern $PACKAGE | grep " $PACKAGE@" | awk -F '@' '{print $3}')
 
-echo "Current @babel/traverse version: $CURRENT_VERSION"
+echo "Current $PACKAGE version: $CURRENT_VERSION"
 
-# check if the version is 7.23.2 or higher
-if [[ "$(printf '%s\n' "$CURRENT_VERSION" "7.23.2" | sort -V | head -n1)" == "7.23.2" ]]; then
-  echo "@babel/traverse version is >= 7.23.2, quitting."
+# Check if the package needs to be updated
+if [[ "$(printf '%s\n' "$CURRENT_VERSION" "$REQUIRED_VERSION" | sort -V | head -n1)" == "$REQUIRED_VERSION" ]]; then
+  echo "$PACKAGE version is >= $REQUIRED_VERSION, quitting."
   exit 1
 fi
 
-# add resolution
-npm pkg set resolutions.@babel/traverse=7.23.2
+# Add resolution
+npm pkg set resolutions.$PACKAGE=$REQUIRED_VERSION
 
 yarn install
 
-# check if the version is 1.11.0 or higher after installation
-NEW_VERSION=$(yarn list --pattern @babel/traverse | grep ' @babel/traverse@' | awk -F '@' '{print $3}')
+# Check again the version
+NEW_VERSION=$(yarn list --pattern $PACKAGE | grep " $PACKAGE@" | awk -F '@' '{print $3}')
 
-echo "@babel/traverse updated to version $NEW_VERSION"
+echo "$PACKAGE updated to version $NEW_VERSION"
 
-# ensure the build works with the new version
+# Ensure the build works with the new version
 NODE_OPTIONS=--openssl-legacy-provider yarn build
 
-# ask for confirmation before making changes
-read -p "Do you want to commit and create a pull request? (y/N): " confirm
-if [[ "$confirm" != "y" ]]; then
-  echo "No changes were made. Exiting now"
-  exit 0
-fi
+confirm_and_commit "$OWNER_AND_REPO" "$PACKAGE" "$CVE" "$USE_BRANCH" "$BRANCH" "$REVIEWER"
+
+# if $USE_BRANCH; then //// 
+#   CONFIRM_MESSAGE="Do you want to commit and create a pull request on repo $OWNER_AND_REPO for $PACKAGE $CVE?"
+# else
+#   CONFIRM_MESSAGE="Do you want to commit changes ON THE MAIN BRANCH of $OWNER_AND_REPO for $PACKAGE $CVE?"
+# fi
+
+# # ask for confirmation before making changes
+# read -p "Do you want to commit and create a pull request on repo $OWNER_AND_REPO for $PACKAGE? (y/N): " confirm
+# if [[ "$confirm" != "y" ]]; then
+#   echo "No changes were made. Exiting now"
+#   exit 0
+# fi
 
-git add -A
-git commit -m "fix: @babel/traverse $CVE"
-git push --set-upstream origin "$BRANCH"
+# git add -A
+# git commit -m "fix: $PACKAGE $CVE"
+# git push --set-upstream origin "$BRANCH"
 
-# create a pull request
-gh pr create --title "fix: @babel/traverse $CVE" --body "Fix $CVE" --reviewer Tbaile
+# # create a pull request
+# gh pr create --title "fix: $PACKAGE $CVE" --body "Fix $CVE" --reviewer $REVIEWER
diff --git a/bulk-script.sh b/ns8-bulk.sh
old mode 100644
new mode 100755
similarity index 94%
rename from bulk-script.sh
rename to ns8-bulk.sh
index a1547f0..f2620a3
--- a/bulk-script.sh
+++ b/ns8-bulk.sh
@@ -15,7 +15,7 @@ REPOS=(
 # invoke script multiple times with different repositories
 for REPO in "${REPOS[@]}"; do
   echo "Processing repository: $REPO"
-  bash ./"$SCRIPT" "$REPO"
+  ./"$SCRIPT" "$REPO"
   # print a newline for better readability
   echo
 done
diff --git a/ns8-helpers.sh b/ns8-helpers.sh
new file mode 100644
index 0000000..7a9c87e
--- /dev/null
+++ b/ns8-helpers.sh
@@ -0,0 +1,103 @@
+# Helper functions for NS8 module scripts
+
+validate_repo_argument() {
+    local owner_and_repo="$1"
+
+    if [ -z "$owner_and_repo" ]; then
+        echo "Usage: $0 <owner/repo>"
+        echo
+        echo "Example: $0 NethServer/ns8-kickstart"
+        return 2
+    fi
+}
+
+# Check if the GitHub CLI is installed
+check_gh_installed() {
+    if ! command -v gh &> /dev/null; then
+        echo "gh (GitHub CLI) is not installed. Please install it first."
+        return 1
+    fi
+}
+
+# Check if the user is logged in to GitHub
+check_gh_logged_in() {
+    if ! gh auth status &> /dev/null; then
+        echo "You are not logged in to GitHub. Please log in using 'gh auth login'."
+        return 1
+    fi
+}
+
+# Check if the Yarn version is compatible
+check_yarn_version() {
+    if ! yarn --version | grep -qE '^1\.22\..+$'; then
+        echo "Yarn not installed or version not compatible, 1.22.x is required"
+        return 1
+    fi
+}
+
+# Clone the repository or pull changes it if it already exists
+clone_or_update_repo() {
+    local owner_and_repo="$1"
+    local git_workspace="$2"
+    local repo="${owner_and_repo##*/}"
+    cd "$git_workspace"
+
+    if [ ! -d "$repo" ]; then
+        echo "Cloning repository $repo..."
+        git clone git@github.com:"$owner_and_repo"
+        cd "$repo"
+    else
+        echo "Repository $repo already exists, skipping clone."
+        cd "$repo"
+        echo "Pulling latest changes..."
+        git checkout main
+        git pull origin main
+    fi
+}
+
+# Create or switch to a branch
+create_or_switch_branch() {
+    local branch="$1"
+
+    if git show-ref --verify --quiet refs/heads/"$branch"; then
+        echo "Switching to existing branch: $branch"
+        git checkout "$branch"
+    else
+        echo "Creating new branch: $branch"
+        git checkout -b "$branch"
+    fi
+}
+
+# Confirm and commit changes, optionally creating a pull request
+confirm_and_commit() {
+    local owner_and_repo="$1"
+    local package="$2"
+    local cve="$3"
+    local use_branch="$4"
+    local branch="$5"
+    local reviewer="$6"
+
+    if $use_branch; then
+        confirm_message="Do you want to commit and create a pull request on repo $owner_and_repo for $package $cve?"
+    else
+        confirm_message="Do you want to commit changes ON THE MAIN BRANCH of $owner_and_repo for $package $cve?"
+    fi
+
+    read -p "$confirm_message (y/N): " confirm
+    if [[ "$confirm" != "y" ]]; then
+        echo "Skipping commit."
+        return 0
+    fi
+
+    git add .
+    git commit -m "fix: $package $cve"
+    git push --set-upstream origin "$branch"
+    
+    if $use_branch; then
+        gh pr create --title "fix: $package $cve" --body "Fix $cve" --reviewer $reviewer
+        echo "Pull request created."
+    else
+        git push origin main
+        echo "Changes pushed to main branch."
+    fi
+}
